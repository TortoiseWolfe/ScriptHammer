{
  "posts": [
    {
      "id": "post_7e7efdff",
      "slug": "this-is-an-extremely-long-url-slug-that-should-be-much-shorter-for-better-seo",
      "title": "low seo",
      "content": "\nThis is a blog post about something that I wanted to write about but I'm not going to include any structure or optimization whatsoever because this is meant to be a bad example that triggers all the SEO warnings in our analyzer system which is designed to help users write better content by identifying common SEO issues that can negatively impact search engine rankings and user engagement metrics so this entire paragraph is just one long run-on sentence without any breaks or structure which makes it very difficult to read and understand what the main point is supposed to be and there are no headings or subheadings to break up the content into digestible sections and there are no images to make the content more visually appealing and engaging for readers who might otherwise get bored reading a wall of text like this one that just goes on and on without any clear purpose or direction.\n\nThe content is also very short overall and doesn't provide enough information to be valuable to readers or search engines that are looking for comprehensive authoritative content on a topic and there are no keywords or tags defined to help search engines understand what this content is about and there's no meta description that would appear in search results to entice users to click through to read the full article and without any links to other resources or related content this post exists in isolation without contributing to or benefiting from the broader link structure of the website.\n",
      "excerpt": "This is a blog post",
      "publishedAt": "2025-09-27T17:47:37.333Z",
      "updatedAt": "2025-09-27T17:47:37.333Z",
      "status": "published",
      "author": {
        "id": "default",
        "name": "Anonymous"
      },
      "metadata": {
        "tags": [
          "seo",
          "optimization",
          "content-writing",
          "best-practices",
          "web-development"
        ],
        "categories": [],
        "readingTime": 2,
        "wordCount": 254,
        "showToc": true,
        "showAuthor": true,
        "showShareButtons": true,
        "featured": false
      },
      "seo": {
        "title": "low seo",
        "description": "This is a blog post",
        "keywords": [
          "seo",
          "optimization",
          "content-writing",
          "best-practices",
          "web-development"
        ],
        "ogTitle": "low seo",
        "ogDescription": "This is a blog post",
        "ogImage": "/blog-images/bad-seo-example-og.png",
        "twitterCard": "summary"
      },
      "frontMatter": {
        "title": "low seo",
        "author": "Anonymous",
        "slug": "this-is-an-extremely-long-url-slug-that-should-be-much-shorter-for-better-seo",
        "excerpt": "This is a blog post",
        "ogImage": "/blog-images/bad-seo-example-og.png",
        "tags": [
          "seo",
          "optimization",
          "content-writing",
          "best-practices",
          "web-development"
        ]
      }
    },
    {
      "id": "post_d60c2ab2",
      "slug": "auto-configuration-system",
      "title": "Auto-Configuration: Use Template and Start Building",
      "content": "\n# Auto-Configuration: Use Template and Start Building\n\nScriptHammer automatically configures itself based on your new repository. Use this template, and everything adapts to your project name and settings with minimal setup.\n\n## Prerequisites\n\n- Docker and Docker Compose installed\n- Git configured with a remote repository\n- Basic familiarity with terminal commands\n\n## Quick Start (10-15 minutes first time)\n\n### 1. Use Template on GitHub\n\nClick \"Use this template\" on [ScriptHammer](https://github.com/TortoiseWolfe/ScriptHammer) and create your repository with any name you like.\n\n### 2. Clone Your New Repository\n\n```bash\ngit clone https://github.com/YourUsername/your-new-repo.git\ncd your-new-repo\n```\n\n### 3. Create Required .env File\n\n**IMPORTANT**: This step is required for Docker to run with proper permissions.\n\n```bash\n# Copy the example file\ncp .env.example .env\n\n# Or create it manually with your system's user ID\necho \"UID=$(id -u)\" > .env\necho \"GID=$(id -g)\" >> .env\n```\n\n### 4. Start Docker\n\n```bash\ndocker compose up\n```\n\nNote: First run will take 5-10 minutes to build the Docker image and install dependencies.\n\n### 5. Access Your Project\n\nYour project is now running at `http://localhost:3000` with your repository name automatically detected!\n\n## What Gets Auto-Configured\n\nWhen you create from template and clone, ScriptHammer automatically detects and configures:\n\n- **Project Name**: From your repository name\n- **Owner Info**: From your GitHub username (not \"Admin\" or generic names)\n- **Author Attribution**: Your actual GitHub username appears everywhere\n- **URLs**: For deployment and links\n- **PWA Settings**: App name and manifest\n- **Build Paths**: For GitHub Pages deployment\n\n### Where to Find Your Configuration\n\nThe auto-config system generates configuration at build time:\n\n1. **TypeScript Config**: `/src/config/project-detected.ts` - Strongly typed for your components\n2. **JSON Config**: `/src/config/project-detected.json` - Raw configuration data\n\nCheck these files after running `docker compose exec scripthammer pnpm run build` - they contain YOUR project's information automatically detected from Git.\n\n## How to Use It\n\nThe configuration is available everywhere in your code:\n\n```typescript\n// In any component\nimport { detectedConfig } from '@/config/project-detected';\n\nexport function Header() {\n  return (\n    <div>\n      <h1>{detectedConfig.projectName}</h1>\n      <a href={detectedConfig.projectUrl}>View on GitHub</a>\n    </div>\n  );\n}\n```\n\n```typescript\n// In API routes\nimport { detectedConfig } from '@/config/project-detected';\n\nexport async function GET() {\n  return Response.json({\n    project: detectedConfig.projectName,\n    owner: detectedConfig.projectOwner,\n  });\n}\n```\n\n## Minimal Manual Setup\n\nTraditional templates require editing multiple files:\n\n- ❌ Update package.json with project name\n- ❌ Change configuration files in multiple locations\n- ❌ Modify deployment scripts\n- ❌ Edit PWA manifests\n- ❌ Update hardcoded references throughout codebase\n\nWith ScriptHammer:\n\n- ✅ Use template with any name\n- ✅ Create `.env` file (one-time, 30 seconds)\n- ✅ Most configuration detected automatically from git\n- ⚠️ Some components may still have hardcoded values (being improved)\n\n## Common Tasks\n\n### Deploy to GitHub Pages\n\n```bash\ndocker compose exec scripthammer pnpm run build\ndocker compose exec scripthammer pnpm run deploy\n# Automatically configured for your repository\n```\n\n### Use Custom Settings\n\n```bash\n# Override with environment variables\nNEXT_PUBLIC_PROJECT_NAME=CustomName docker compose exec scripthammer pnpm run dev\n```\n\n### Check Current Config\n\nLook at `src/config/project-detected.ts` after running the build—it shows your detected settings.\n\n## Key Benefits\n\n- **Quick Setup**: Use template and start coding in 10-15 minutes\n- **Minimal Configuration**: Only `.env` file required, rest auto-detects\n- **Works in Most Environments**: Local Docker, GitHub Actions CI/CD\n- **Reduced Errors**: Fewer manual edits means fewer mistakes\n\n## How It Works\n\nThe core detection script (`scripts/detect-project.js`) runs at build time:\n\n```javascript\nfunction getProjectInfo() {\n  // 1. Check environment variables (highest priority)\n  if (\n    process.env.NEXT_PUBLIC_PROJECT_NAME &&\n    process.env.NEXT_PUBLIC_PROJECT_OWNER\n  ) {\n    return {\n      projectName: process.env.NEXT_PUBLIC_PROJECT_NAME,\n      projectOwner: process.env.NEXT_PUBLIC_PROJECT_OWNER,\n      source: 'env',\n    };\n  }\n\n  // 2. Try git remote detection\n  const gitUrl = getGitRemoteUrl();\n  const gitInfo = parseGitUrl(gitUrl);\n  if (gitInfo) {\n    return {\n      projectName: gitInfo.repo,\n      projectOwner: gitInfo.owner,\n      source: 'git',\n    };\n  }\n\n  // 3. Fall back to defaults\n  return {\n    projectName: 'ScriptHammer',\n    projectOwner: 'TortoiseWolfe',\n    source: 'default',\n  };\n}\n```\n\nThe script (under 180 lines) handles:\n\n- Multiple git remote formats (HTTPS, SSH, various hosts)\n- CI/CD environment detection\n- Safe file writing with atomic operations\n- TypeScript and JSON generation\n\n## Advanced Features\n\n### Environment Detection\n\nCurrently supported:\n\n- **GitHub Actions CI** - Automatically configures for GitHub Pages\n- **Local Docker Development** - Consistent development environment\n- **Local Development** - Standard local configuration\n\nComing Soon (Sprint 4):\n\n- **Vercel Deployment** - Platform-specific optimization\n- **Netlify Deployment** - Automatic configuration\n- **AWS/Azure/GCP** - Cloud platform detection\n- **Kubernetes/Docker Swarm** - Container orchestration\n\n### Multiple Environments\n\n```bash\n# Development\ndocker compose exec scripthammer pnpm run dev\n\n# Staging\nNEXT_PUBLIC_PROJECT_NAME=staging-app docker compose exec scripthammer pnpm run build\n\n# Production\ndocker compose exec scripthammer pnpm run build  # Uses git remote info\n```\n\n## Try It Now\n\n1. **Use Template** [ScriptHammer](https://github.com/TortoiseWolfe/ScriptHammer) (30 seconds)\n2. **Clone** your new repository (30 seconds)\n3. **Create .env** with `cp .env.example .env` (30 seconds)\n4. **Run** `docker compose up` (5-10 minutes first build)\n5. **Check** `http://localhost:3000` - your project is ready!\n\n### What You'll See\n\n- Title bar shows YOUR project name\n- Footer links to YOUR GitHub repository\n- PWA installer shows YOUR app name\n- `/status` page displays YOUR project info\n- All configuration files have YOUR details\n\n## Technical Details\n\n### Generated Files\n\nConfiguration files are generated at build time (not committed to git):\n\n- `src/config/project-detected.ts` - TypeScript configuration\n- `src/config/project-detected.json` - JSON for build scripts\n- `public/manifest.json` - PWA manifest with your project name\n- Meta tags and URLs throughout the application\n\n### Git Remote Parsing\n\nSupports multiple formats:\n\n- `https://github.com/user/repo.git`\n- `git@github.com:user/repo.git`\n- `https://gitlab.com/user/repo.git`\n- `git@bitbucket.org:user/repo.git`\n\n### Build Integration\n\n```json\n// package.json\n{\n  \"scripts\": {\n    \"dev\": \"node scripts/detect-project.js && next dev\",\n    \"build\": \"node scripts/detect-project.js && next build\"\n  }\n}\n```\n\n## Visual Overview\n\n![Auto-Configuration Flow Diagram](/blog-images/auto-config/config-flow.svg)\n_The auto-configuration process: Use Template → Clone → Ready in 3 simple steps_\n\nThe magic happens through our detection script that runs at build time, analyzing your git remote to extract project information and automatically generating all configuration files.\n\n## Traditional Setup vs ScriptHammer\n\n![Before and After Comparison](/blog-images/auto-config/before-after.svg)\n_Save 30-60 minutes of manual configuration with every new project_\n\nWhile traditional templates require editing 22+ files and configuration points, ScriptHammer handles everything automatically. No more hunting for hardcoded values or broken references after using the template.\n\n## Troubleshooting\n\n### Common Issues\n\n**Docker permission errors:**\n- Make sure your `.env` file contains correct UID/GID values\n- Run `id -u` and `id -g` to get your system values\n- Ensure Docker daemon is running\n\n**Auto-detection not working:**\n- Verify you have a git remote: `git remote -v`\n- If no remote, add one: `git remote add origin https://github.com/YourUsername/your-repo.git`\n- The detection reads from git remote origin URL\n\n**Project name not updating:**\n- Auto-detection runs at BUILD time, not runtime\n- Run `docker compose exec scripthammer pnpm run build` to regenerate\n- Check `src/config/project-detected.ts` for detected values\n\n**Hardcoded values still showing \"ScriptHammer\":**\n- Some components may still have hardcoded values\n- This is a known limitation being addressed\n- Main configuration files ARE auto-detected correctly\n\n## The Bottom Line\n\nScriptHammer significantly reduces setup friction compared to traditional templates. While not completely \"zero-config,\" it automates most configuration through git detection, requiring only minimal setup (creating the `.env` file).\n\n**Minimal configuration. Quick setup. Use template and build.**\n\n---\n\n_P.S. - Check out `/scripts/detect-project.js` to see the complete auto-configuration implementation. It's a pragmatic solution that handles 90% of configuration automatically._\n",
      "excerpt": "ScriptHammer's auto-configuration eliminates setup friction. Use the template, run Docker, and watch your project automatically adapt with zero manual config.",
      "publishedAt": "2025-09-27T00:00:00.000Z",
      "updatedAt": "2025-09-28T15:06:19.692Z",
      "status": "published",
      "author": {
        "id": "default",
        "name": "Development Team"
      },
      "metadata": {
        "tags": [
          "auto-config",
          "automation",
          "developer-experience"
        ],
        "categories": [
          "DevOps",
          "Automation",
          "DX"
        ],
        "readingTime": 7,
        "wordCount": 1211,
        "showToc": true,
        "showAuthor": true,
        "showShareButtons": true,
        "featured": true,
        "featuredImage": "/blog-images/auto-config/featured.svg",
        "featuredImageAlt": "Auto-Configuration System - Zero Config Magic for Your New Project"
      },
      "seo": {
        "title": "Auto-Configuration: Use Template and Start Building",
        "description": "ScriptHammer's auto-configuration eliminates setup friction. Use the template, run Docker, and watch your project automatically adapt with zero manual config.",
        "keywords": [
          "auto-config",
          "automation",
          "developer-experience"
        ],
        "ogTitle": "Auto-Configuration: Use Template and Start Building",
        "ogDescription": "ScriptHammer's auto-configuration eliminates setup friction. Use the template, run Docker, and watch your project automatically adapt with zero manual config.",
        "ogImage": "/blog-images/auto-config/featured-og.png",
        "twitterCard": "summary"
      },
      "frontMatter": {
        "title": "Auto-Configuration: Use Template and Start Building",
        "slug": "auto-configuration-system",
        "excerpt": "ScriptHammer's auto-configuration eliminates setup friction. Use the template, run Docker, and watch your project automatically adapt with zero manual config.",
        "author": "Development Team",
        "date": "2025-09-27T00:00:00.000Z",
        "status": "scheduled",
        "featured": true,
        "categories": [
          "DevOps",
          "Automation",
          "DX"
        ],
        "tags": [
          "auto-config",
          "automation",
          "developer-experience"
        ],
        "readTime": "5 min read",
        "featuredImage": "/blog-images/auto-config/featured.svg",
        "featuredImageAlt": "Auto-Configuration System - Zero Config Magic for Your New Project",
        "ogImage": "/blog-images/auto-config/featured-og.png"
      }
    },
    {
      "id": "post_968f439a",
      "slug": "scripthammer-intro",
      "title": "Scripthammer - Opinionated Next.js PWA Template",
      "content": "\n# Scripthammer: Your Production-Ready Next.js Template\n\nScripthammer is an opinionated Next.js template that comes batteries-included with everything you need to build modern web applications. No more setup fatigue - just clone and start building.\n\n## What's Actually In This Template\n\n![Scripthammer Dashboard](/blog-images/scripthammer-intro/dashboard-overview.svg)\n_The Scripthammer dashboard showing the theme switcher and component structure_\n\n### Core Technologies\n\n- **[Next.js](https://nextjs.org/) 15.5.2** with App Router and static export support\n- **[React](https://react.dev/) 19.1.0** with [TypeScript](https://www.typescriptlang.org/) strict mode\n- **[Tailwind CSS](https://tailwindcss.com/) (Cascading Style Sheets) v4** with [DaisyUI](https://daisyui.com/) providing 32 built-in themes\n- **PWA Support** with offline capabilities via [Workbox](https://developer.chrome.com/docs/workbox/)\n- **[Docker](https://www.docker.com/)-First Development** - everything runs in containers\n\n### Real Features That Work\n\n#### 🎨 32 Theme System\n\nNot just light and dark mode - we ship with 32 complete themes from [DaisyUI](https://daisyui.com/):\n\n- Classic: light, dark, cupcake, bumblebee\n- Modern: synthwave, cyberpunk, valentine, halloween\n- Professional: corporate, business, emerald, forest\n- Experimental: acid, lemonade, coffee, winter\n\nTheme switching is instant and persisted across sessions.\n\n#### ♿ Accessibility Built-In\n\n- Color vision assistance for 8 types of color blindness\n- Font size scaling system\n- Screen reader optimizations\n- Keyboard navigation throughout\n- WCAG (Web Content Accessibility Guidelines) 2.1 AA compliance ready\n\n#### 🧪 Testing That Actually Runs\n\n![Testing Suite Output](/blog-images/scripthammer-intro/testing-output.svg)\n_Comprehensive test suite with unit, E2E (End-to-End), and accessibility testing_\n\n```bash\ndocker compose exec scripthammer pnpm run test:suite\n```\n\n- [Vitest](https://vitest.dev/) for unit tests (58% coverage)\n- [Playwright](https://playwright.dev/) for E2E (End-to-End) testing (40+ tests)\n- [Pa11y](https://pa11y.org/) for accessibility testing\n- Component structure validation\n- Pre-push hooks with [Husky](https://typicode.github.io/husky/)\n\n#### 📱 True PWA Support\n\n- Service worker with offline mode\n- Background sync for form submissions\n- [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) for local data storage\n- App manifest for installability\n- Push notification ready\n\n## Docker Development Environment\n\n![Docker Architecture](/blog-images/scripthammer-intro/docker-architecture.svg)\n_Docker-first development environment with isolated containers_\n\nEverything runs in [Docker](https://www.docker.com/). No \"works on my machine\" problems:\n\n```bash\n# Start development\ndocker compose up\n\n# Run any command\ndocker compose exec scripthammer pnpm run dev\ndocker compose exec scripthammer pnpm test\ndocker compose exec scripthammer pnpm run generate:component\n```\n\n## Component Generator\n\nStop copying component boilerplate. Use the generator:\n\n```bash\ndocker compose exec scripthammer pnpm run generate:component MyComponent atomic\n```\n\nThis creates the required 5-file structure:\n\n- `MyComponent.tsx` - Main component\n- `MyComponent.test.tsx` - Unit tests\n- `MyComponent.stories.tsx` - [Storybook](https://storybook.js.org/) stories\n- `MyComponent.accessibility.test.tsx` - A11y tests\n- `index.tsx` - Barrel export\n\n## Project Configuration\n\nThe project auto-detects most configuration from your Git repository:\n\n```typescript\n// Auto-configured from git remote at build time\nconst projectConfig = {\n  name: 'YourRepoName',  // Detected from repository\n  owner: 'YourGitHubUsername',\n  basePath: '/',  // Configured for GitHub Pages\n  repository: 'https://github.com/YourUsername/YourRepoName',\n};\n```\n\nMinimal setup required - just create your `.env` file and the rest is detected automatically.\n\n## Current Features in Production\n\n### Privacy & Consent\n\n- GDPR (General Data Protection Regulation)-compliant cookie consent system\n- Granular privacy controls\n- [Google Analytics](https://analytics.google.com/) integration (with consent)\n\n### Blog System\n\n- Markdown-based blog with frontmatter\n- SEO (Search Engine Optimization) analysis and scoring\n- Table of contents generation\n- Offline-first with IndexedDB storage\n- Background sync for offline edits\n\n### Maps & Location\n\n- [Leaflet](https://leafletjs.com/) integration for interactive maps\n- Geolocation with privacy consent\n- [OpenStreetMap](https://www.openstreetmap.org/) tiles (no API (Application Programming Interface) key needed)\n\n### Calendar Integration\n\n- [Calendly](https://calendly.com/) and [Cal.com](https://cal.com/) embedded support\n- Privacy-first with consent modal\n- Event scheduling capabilities\n\n## File Structure\n\n```\nsrc/\n├── app/                # Next.js app router pages\n├── components/\n│   ├── subatomic/     # Smallest reusable pieces\n│   ├── atomic/        # Basic components\n│   ├── molecular/     # Composite components\n│   └── organisms/     # Full sections\n├── contexts/          # React contexts\n├── services/          # Business logic\n├── lib/              # Core libraries\n├── utils/            # Utility functions\n└── types/            # TypeScript definitions\n```\n\n## Testing Commands\n\n```bash\n# Quick validation\ndocker compose exec scripthammer pnpm run test:quick\n\n# Full test suite\ndocker compose exec scripthammer pnpm run test:suite\n\n# Specific tests\ndocker compose exec scripthammer pnpm run type-check\ndocker compose exec scripthammer pnpm run lint\ndocker compose exec scripthammer pnpm run test:coverage\n```\n\n## Why Scripthammer?\n\n1. **Quick Setup** - Create `.env`, run `docker compose up`, and you're developing\n2. **Reduced Configuration** - Opinionated choices with auto-detection from git\n3. **Production Features** - Battle-tested components and patterns\n4. **TypeScript First** - Comprehensive typing with strict mode enabled\n5. **Well Tested** - Full test suite with unit, E2E, and accessibility testing\n\n## Getting Started\n\n```bash\n# Use the template on GitHub first\n# Then clone YOUR new repository\ngit clone https://github.com/YourUsername/your-new-repo.git\ncd your-new-repo\n\n# Create required .env file\ncp .env.example .env\n\n# Start Docker (first build takes 5-10 minutes)\ndocker compose up\n\n# Open http://localhost:3000\n```\n\nQuick setup with minimal configuration. No npm install locally, no version conflicts.\n\n## What's Next?\n\nCheck out the [CONSTITUTION.md](https://github.com/TortoiseWolfe/ScriptHammer/blob/main/.specify/memory/constitution.md) for the project principles and current sprint goals. Read [CLAUDE.md](https://github.com/TortoiseWolfe/ScriptHammer/blob/main/CLAUDE.md) for AI (Artificial Intelligence) pair programming guidelines and best practices when working with this codebase.\n\nThis is Scripthammer. Stop configuring, start shipping.\n",
      "excerpt": "Opinionated Next.js 15.5 template with PWA support, 32 DaisyUI themes, Docker-first development environment, and comprehensive testing suite.",
      "publishedAt": "2025-09-26T00:00:00.000Z",
      "updatedAt": "2025-09-28T15:12:30.362Z",
      "status": "published",
      "author": {
        "id": "default",
        "name": "TortoiseWolfe"
      },
      "metadata": {
        "tags": [
          "scripthammer",
          "next.js",
          "pwa",
          "typescript",
          "docker"
        ],
        "categories": [
          "documentation"
        ],
        "readingTime": 5,
        "wordCount": 820,
        "showToc": true,
        "showAuthor": true,
        "showShareButtons": true,
        "featured": false,
        "featuredImage": "/blog-images/scripthammer-intro/featured-og.svg",
        "featuredImageAlt": "Scripthammer - The Opinionated Next.js PWA Template with 32 themes and Docker development"
      },
      "seo": {
        "title": "Scripthammer - Opinionated Next.js PWA Template",
        "description": "Opinionated Next.js 15.5 template with PWA support, 32 DaisyUI themes, Docker-first development environment, and comprehensive testing suite.",
        "keywords": [
          "scripthammer",
          "next.js",
          "pwa",
          "typescript",
          "docker"
        ],
        "ogTitle": "Scripthammer - Opinionated Next.js PWA Template",
        "ogDescription": "Build production-ready Next.js apps with 32 themes, Docker development, PWA support, and comprehensive testing. No configuration hell.",
        "ogImage": "/blog-images/scripthammer-intro/featured-og.png",
        "twitterCard": "summary_large_image"
      },
      "frontMatter": {
        "title": "Scripthammer - Opinionated Next.js PWA Template",
        "author": "TortoiseWolfe",
        "date": "2025-09-26T00:00:00.000Z",
        "slug": "scripthammer-intro",
        "tags": [
          "scripthammer",
          "next.js",
          "pwa",
          "typescript",
          "docker"
        ],
        "categories": [
          "documentation"
        ],
        "excerpt": "Opinionated Next.js 15.5 template with PWA support, 32 DaisyUI themes, Docker-first development environment, and comprehensive testing suite.",
        "featuredImage": "/blog-images/scripthammer-intro/featured-og.svg",
        "featuredImageAlt": "Scripthammer - The Opinionated Next.js PWA Template with 32 themes and Docker development",
        "ogImage": "/blog-images/scripthammer-intro/featured-og.png",
        "ogTitle": "Scripthammer - Opinionated Next.js PWA Template",
        "ogDescription": "Build production-ready Next.js apps with 32 themes, Docker development, PWA support, and comprehensive testing. No configuration hell.",
        "twitterCard": "summary_large_image"
      }
    }
  ],
  "generated": "2025-09-28T15:13:33.175Z",
  "count": 3,
  "tags": [
    "seo",
    "optimization",
    "content-writing",
    "best-practices",
    "web-development",
    "auto-config",
    "automation",
    "developer-experience",
    "scripthammer",
    "next.js",
    "pwa",
    "typescript",
    "docker"
  ],
  "categories": [
    "DevOps",
    "Automation",
    "DX",
    "documentation"
  ]
}